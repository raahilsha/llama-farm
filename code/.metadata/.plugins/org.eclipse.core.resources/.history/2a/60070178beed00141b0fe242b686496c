import java.awt.Color;
import java.io.*;
import java.util.*;
import java.util.regex.*;

public class Parameters
{
	// Used to check if a String is a double
	private static Pattern double_pattern = Pattern.compile(
		    "[\\x00-\\x20]*[+-]?(NaN|Infinity|((((\\p{Digit}+)(\\.)?((\\p{Digit}+)?)" +
		    "([eE][+-]?(\\p{Digit}+))?)|(\\.((\\p{Digit}+))([eE][+-]?(\\p{Digit}+))?)|" +
		    "(((0[xX](\\p{XDigit}+)(\\.)?)|(0[xX](\\p{XDigit}+)?(\\.)(\\p{XDigit}+)))" +
		    "[pP][+-]?(\\p{Digit}+)))[fFdD]?))[\\x00-\\x20]*");
	
	// Write experiment notes here to debug
	public static String experiment_notes = "All values started at 0.1, medium of hazards (0.05)";
	
	// Window Settings
	public static int window_size = 1000; // Width and height of the game window. Recommend to keep constant
	public static int frames_per_second = -1; // FPS of simulation. Set to negative value to remove frame limiter
	
	// World Instantiation Settings
	// The below 3 should be in constant increasing order
	public static double world_arability = 0.2; // Probability of a spot on the world getting food = arability
	public static double world_obsrate = 0.6; // Probability of a spot on the world being colored alternatively = obsrate - arability
	public static double world_hazrate = 0.65; // Probability of a spot on the world being dangerous = hazrate - obsrate
	
	public static double energy_loss = 10; // Energy lost every turn
	
	// Simulation Settings
	public static int num_tiles = 125; // Number of tiles in world width and height. Should be a factor of window_size
	public static int num_llamas = 100; // Number of llamas in world. Should be a multiple of 4
	public static int num_generations = 500; // Maximum number of generations
	public static boolean debug = true; // Debug?
	public static boolean debug_to_cmd = true; // Print stats to Console?
	public static boolean debug_to_csv = true; // Print stats to CSV file?
	
	// Genetics Settings
	public static double mutation_rate = 0.0; // Rate of mutation
	public static int genome_length = 1000; // Length of each gene
	
	// Initial Genome Settings
	public static double hunger_init = 0.1; // Initial hunger probability
	public static double lazy_init = 0.1; // Initial laziness probability
	public static double violent_init = 0.1; // Initial violence probability
	public static double meta_init = 0.1; // Initial metabolism probability
	public static double style_init = 0.1; // Initial style probability
	
	// Color Palettes
	public static Color[] style_colors = // Light pink -> dark purple values representing style
	{
		new Color(0xFCE4EC),
		new Color(0xF8BBD0),
		new Color(0xF48FB1),
		new Color(0xF06292),
		new Color(0xEC407A),
		new Color(0xE91E63),
		new Color(0xD81B60),
		new Color(0xC2185B),
		new Color(0xAD1457),
		new Color(0x880E4F)
	};
	
	public static Color[] tile_colors = // Colors for the tiles
	{
		new Color(0x795548),
		new Color(0x00E676),
		new Color(0xFF3D00),
		new Color(0x424242)
	};
	
	// Llama Behaviour Settings
	public static double energy_init = 1000; // Initial energy
	public static double idle_regain = 2.5; // How much energy is saved while idle
	public static double aggressive_loss = 2.5; // How much energy is lost when aggressive
	public static int search_radius = 5; // How far to search when pathfinding
	public static double food_regain = 2000; // How much energy is regained by eating
	public static double attack_loss = 200; // How much energy is lost when attacked
	// Increase this to increase the chance of a llama being stunned when faced with a more stylish llama
	public static double stylishness_multiplicity = 2.5;
	
	// Llama Timer Settings
	public static int run_cooldown = 5; // How long to run away from a foe
	public static int stun_timer = 10; // How long to stay stunned
	public static int eating_timer = 5; // How long to spend eating
	
	// Prints all parameters to a file
	public static void print_params(long time)
	{
		PrintWriter out = null;
		try
		{
			out = new PrintWriter(new FileWriter(new File("Experiment_" + time + "_info.txt")));
		}
		catch (IOException e)
		{
			e.printStackTrace();
			System.exit(0);
		}
		// Have to do this manually since everything in parameters is static
		out.println("Experiment at time " + time);
		out.println("------------------------------");
		out.println("experiment_notes: " + experiment_notes);
		out.println("window_size: " + window_size);
		out.println("frames_per_second: " + frames_per_second);
		out.println("world_arability: " + world_arability);
		out.println("world_obsrate: " + world_obsrate);
		out.println("world_hazrate: " + world_hazrate);
		out.println("energy_loss: " + energy_loss);
		out.println("num_tiles: " + num_tiles);
		out.println("num_llamas: " + num_llamas);
		out.println("num_generations: " + num_generations);
		out.println("mutation_rate: " + mutation_rate);
		out.println("genome_length: " + genome_length);
		out.println("hunger_init: " + hunger_init);
		out.println("lazy_init: " + lazy_init);
		out.println("violent_init: " + violent_init);
		out.println("meta_init: " + meta_init);
		out.println("style_init: " + style_init);
		out.println("energy_init: " + energy_init);
		out.println("idle_regain: " + idle_regain);
		out.println("aggressive_loss: " + aggressive_loss);
		out.println("search_radius: " + search_radius);
		out.println("food_regain: " + food_regain);
		out.println("attack_loss: " + attack_loss);
		out.println("stylishness_multiplicity: " + stylishness_multiplicity);
		out.println("run_cooldown: " + run_cooldown);
		out.println("stun_timer: " + stun_timer);
		out.println("eating_timer: " + eating_timer);
		out.flush();
		out.close();
	}
	
	public static void askForParameters()
	{
		Scanner in = new Scanner(System.in);
		System.out.print("Do you want to use new parameters for the next generation? (y/n): ");
		String reply = in.nextLine();
		if (reply.charAt(0) == 'N' || reply.charAt(0) == 'n')
		{
			return;
		}
		
		System.out.print("world_arability (default = " + world_arability + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			world_arability = Double.parseDouble(reply);
		
		System.out.print("world_obsrate (default = " + world_obsrate + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			world_obsrate = Double.parseDouble(reply);
		
		System.out.print("world_hazrate (default = " + world_hazrate + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			world_hazrate = Double.parseDouble(reply);
		
		System.out.print("energy_loss (default = " + energy_loss + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			energy_loss = Double.parseDouble(reply);
		
		System.out.print("num_llamas (default = " + num_llamas + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			world_arability = Double.parseDouble(reply);
		
		System.out.print("mutation_rate (default = " + mutation_rate + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			mutation_rate = Double.parseDouble(reply);
		
		System.out.print("energy_init (default = " + energy_init + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			energy_init = Double.parseDouble(reply);
		
		System.out.print("idle_regain (default = " + idle_regain + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			idle_regain = Double.parseDouble(reply);
		
		System.out.print("aggressive_loss (default = " + aggressive_loss + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			aggressive_loss = Double.parseDouble(reply);
		
		System.out.print("search_radius (default = " + search_radius + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			search_radius = (int) Double.parseDouble(reply);
		
		System.out.print("food_regain (default = " + food_regain + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			food_regain = Double.parseDouble(reply);
		
		System.out.print("attack_loss (default = " + attack_loss + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			attack_loss = Double.parseDouble(reply);
		
		System.out.print("stylishness_multiplicity (default = " + stylishness_multiplicity + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			stylishness_multiplicity = Double.parseDouble(reply);
		
		System.out.print("run_cooldown (default = " + run_cooldown + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			run_cooldown = (int) Double.parseDouble(reply);
		
		System.out.print("stun_timer (default = " + stun_timer + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			stun_timer = (int) Double.parseDouble(reply);
		
		System.out.print("eating_timer (default = " + eating_timer + " ): ");
		reply = in.nextLine();
		if (double_pattern.matcher(reply).matches())
			eating_timer = (int) Double.parseDouble(reply);
	}
}
